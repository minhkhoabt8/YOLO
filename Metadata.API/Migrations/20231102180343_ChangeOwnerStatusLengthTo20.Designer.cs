// <auto-generated />
using System;
using Metadata.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Metadata.API.Migrations
{
    [DbContext(typeof(YoloMetadataContext))]
    [Migration("20231102180343_ChangeOwnerStatusLengthTo20")]
    partial class ChangeOwnerStatusLengthTo20
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Metadata.Core.Entities.AssetCompensation", b =>
                {
                    b.Property<string>("AssetCompensationId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("asset_compensation_id");

                    b.Property<string>("CompensationContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("compensation_content");

                    b.Property<decimal>("CompensationPrice")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("compensation_price");

                    b.Property<int>("CompensationRate")
                        .HasColumnType("int")
                        .HasColumnName("compensation_rate");

                    b.Property<string>("CompensationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("compensation_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_id");

                    b.Property<int>("QuantityArea")
                        .HasColumnType("int")
                        .HasColumnName("quantity_area");

                    b.Property<string>("UnitPriceAssetId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit_price_asset_id");

                    b.HasKey("AssetCompensationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UnitPriceAssetId");

                    b.ToTable("AssetCompensations");
                });

            modelBuilder.Entity("Metadata.Core.Entities.AssetGroup", b =>
                {
                    b.Property<string>("AssetGroupId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("asset_group_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("AssetGroupId");

                    b.ToTable("AssetGroups");
                });

            modelBuilder.Entity("Metadata.Core.Entities.AssetUnit", b =>
                {
                    b.Property<string>("AssetUnitId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("asset_unit_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("AssetUnitId");

                    b.ToTable("AssetUnits");
                });

            modelBuilder.Entity("Metadata.Core.Entities.AttachFile", b =>
                {
                    b.Property<string>("AttachFileId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("attach_file_id");

                    b.Property<string>("AssetCompensationId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("asset_compensation_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("file_type");

                    b.Property<string>("GcnLandInfoId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GCN_land_info_id");

                    b.Property<string>("MeasuredLandInfoId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("measured_land_info_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_id");

                    b.Property<string>("PlanId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("plan_id");

                    b.Property<string>("ReferenceLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reference_link");

                    b.HasKey("AttachFileId");

                    b.HasIndex("AssetCompensationId");

                    b.HasIndex("GcnLandInfoId");

                    b.HasIndex("MeasuredLandInfoId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlanId");

                    b.ToTable("AttachFiles");
                });

            modelBuilder.Entity("Metadata.Core.Entities.AuditTrail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("id")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("AffectedColumn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("affected_column")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("new_value")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("old_value")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primary_key")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("table_name")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_id")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_name")
                        .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                    b.HasKey("Id")
                        .HasName("PK_AuditTrails_1");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Deduction", b =>
                {
                    b.Property<string>("DeductionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("deduction_id");

                    b.Property<string>("DeductionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deduction_content");

                    b.Property<decimal>("DeductionPrice")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("deduction_price");

                    b.Property<string>("DeductionTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("deduction_type_id");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_id");

                    b.HasKey("DeductionId");

                    b.HasIndex("DeductionTypeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Deductions");
                });

            modelBuilder.Entity("Metadata.Core.Entities.DeductionType", b =>
                {
                    b.Property<string>("DeductionTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("deduction_type_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("DeductionTypeId");

                    b.ToTable("DeductionTypes");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Document", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("document_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<string>("DocumentTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("document_type_id");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnName("effective_date");

                    b.Property<string>("Epitome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("epitome");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_name");

                    b.Property<int?>("FileSize")
                        .HasColumnType("int")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("is_public");

                    b.Property<string>("Notation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("notation");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("number");

                    b.Property<string>("Pen")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pen");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("date")
                        .HasColumnName("published_date");

                    b.Property<string>("ReferenceLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reference_link");

                    b.Property<string>("SignInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sign_info");

                    b.HasKey("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Metadata.Core.Entities.DocumentType", b =>
                {
                    b.Property<string>("DocumentTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("document_type_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Metadata.Core.Entities.GcnlandInfo", b =>
                {
                    b.Property<string>("GcnLandInfoId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GCN_land_info_id");

                    b.Property<string>("GcnOwnerCertificate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GCN_owner_certificate");

                    b.Property<string>("GcnPageNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("GCN_page_number");

                    b.Property<string>("GcnPlotAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("GCN_plot_address");

                    b.Property<decimal?>("GcnPlotArea")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("GCN_plot_area");

                    b.Property<string>("GcnPlotNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("GCN_plot_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LandTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("land_type_id");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_id");

                    b.HasKey("GcnLandInfoId");

                    b.HasIndex("LandTypeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("GCNLandInfos", (string)null);
                });

            modelBuilder.Entity("Metadata.Core.Entities.LandGroup", b =>
                {
                    b.Property<string>("LandGroupId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("land_group_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("LandGroupId");

                    b.ToTable("LandGroups");
                });

            modelBuilder.Entity("Metadata.Core.Entities.LandPositionInfo", b =>
                {
                    b.Property<string>("LandInfoPositionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("land_info_position_id");

                    b.Property<string>("Description")
                        .HasColumnType("ntext")
                        .HasColumnName("description");

                    b.Property<string>("LandInfoType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("land_info_type");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("location_name");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_id");

                    b.HasKey("LandInfoPositionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("LandPositionInfos");
                });

            modelBuilder.Entity("Metadata.Core.Entities.LandResettlement", b =>
                {
                    b.Property<string>("LandResettlementId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("land_resettlement_id");

                    b.Property<decimal?>("LandSize")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("land_size");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_id");

                    b.Property<string>("PageNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("page_number");

                    b.Property<string>("PlotAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("plot_address");

                    b.Property<string>("PlotNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("plot_number");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("position");

                    b.Property<string>("ResettlementProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("resettlement_project_id");

                    b.Property<decimal?>("TotalLandPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_land_price");

                    b.HasKey("LandResettlementId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ResettlementProjectId");

                    b.ToTable("LandResettlements");
                });

            modelBuilder.Entity("Metadata.Core.Entities.LandType", b =>
                {
                    b.Property<string>("LandTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("land_type_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LandGroupId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("land_group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("LandTypeId");

                    b.HasIndex("LandGroupId");

                    b.ToTable("LandTypes");
                });

            modelBuilder.Entity("Metadata.Core.Entities.LogError", b =>
                {
                    b.Property<string>("ErrorId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("error_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("ErrorInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("error_info");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("status_code");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("user_name");

                    b.HasKey("ErrorId");

                    b.ToTable("LogErrors");
                });

            modelBuilder.Entity("Metadata.Core.Entities.MeasuredLandInfo", b =>
                {
                    b.Property<string>("MeasuredLandInfoId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("measured_land_info_id");

                    b.Property<string>("CompensationNote")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("compensation_note");

                    b.Property<decimal?>("CompensationPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("compensation_price");

                    b.Property<decimal?>("CompensationRate")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("compensation_rate");

                    b.Property<string>("GcnLandInfoId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GCN_land_info_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LandTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("land_type_id");

                    b.Property<string>("MeasuredPageNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("measured_page_number");

                    b.Property<string>("MeasuredPlotAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("measured_plot_address");

                    b.Property<decimal?>("MeasuredPlotArea")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("measured_plot_area");

                    b.Property<string>("MeasuredPlotNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("measured_plot_number");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_id");

                    b.Property<decimal?>("UnitPriceLandCost")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("unit_price_land_cost");

                    b.Property<string>("UnitPriceLandId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit_price_land_id");

                    b.Property<decimal?>("WithdrawArea")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("withdraw_area");

                    b.HasKey("MeasuredLandInfoId");

                    b.HasIndex("GcnLandInfoId");

                    b.HasIndex("LandTypeId");

                    b.HasIndex("UnitPriceLandId");

                    b.ToTable("MeasuredLandInfo", (string)null);
                });

            modelBuilder.Entity("Metadata.Core.Entities.OrganizationType", b =>
                {
                    b.Property<string>("OrganizationTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("organization_type_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("OrganizationTypeId");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Owner", b =>
                {
                    b.Property<string>("OwnerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_id");

                    b.Property<string>("HusbandWifeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("husband_wife_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OrganizationTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("organization_type_id");

                    b.Property<string>("OwnerAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("owner_address");

                    b.Property<string>("OwnerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("owner_code");

                    b.Property<string>("OwnerCreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("owner_created_by");

                    b.Property<DateTime>("OwnerCreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("owner_created_time");

                    b.Property<DateTime?>("OwnerDateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("owner_date_of_birth");

                    b.Property<string>("OwnerEthnic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_ethnic");

                    b.Property<string>("OwnerGender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("owner_gender");

                    b.Property<string>("OwnerIdCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("owner_id_code");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_name");

                    b.Property<string>("OwnerNational")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_national");

                    b.Property<string>("OwnerStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("owner_status");

                    b.Property<string>("OwnerTaxCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("owner_tax_code");

                    b.Property<string>("OwnerType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("owner_type");

                    b.Property<string>("PlanId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("plan_id");

                    b.Property<string>("ProjectId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("date")
                        .HasColumnName("published_date");

                    b.Property<string>("PublishedPlace")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("published_place");

                    b.Property<string>("RepresentPerson")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("represent_person");

                    b.Property<DateTime?>("TaxPublishedDate")
                        .HasColumnType("date")
                        .HasColumnName("tax_published_date");

                    b.HasKey("OwnerId");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Plan", b =>
                {
                    b.Property<string>("PlanId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("plan_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PlanApprovedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("plan_approved_by");

                    b.Property<string>("PlanCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("plan_code");

                    b.Property<string>("PlanCreateBase")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("plan_create_base");

                    b.Property<string>("PlanCreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("plan_created_by");

                    b.Property<DateTime>("PlanCreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("plan_created_time");

                    b.Property<string>("PlanDescription")
                        .HasColumnType("ntext")
                        .HasColumnName("plan_description");

                    b.Property<DateTime>("PlanEndedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("plan_ended_time");

                    b.Property<string>("PlanLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("plan_location");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("plan_name");

                    b.Property<string>("PlanPhrase")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("plan_phrase");

                    b.Property<DateTime?>("PlanReportDate")
                        .HasColumnType("date")
                        .HasColumnName("plan_report_date");

                    b.Property<string>("PlanReportSignal")
                        .HasColumnType("ntext")
                        .HasColumnName("plan_report_signal");

                    b.Property<string>("PlanStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("plan_status");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_id");

                    b.Property<decimal>("TotalDeduction")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_deduction");

                    b.Property<decimal>("TotalGpmbServiceCost")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_gpmb_service_cost");

                    b.Property<decimal>("TotalLandRecoveryArea")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_land_recovery_area");

                    b.Property<int>("TotalOwnerSupportCompensation")
                        .HasColumnType("int")
                        .HasColumnName("total_owner_support_compensation");

                    b.Property<decimal>("TotalPriceArchitectureSupportCompensation")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_price_architecture_support_compensation");

                    b.Property<decimal>("TotalPriceCompensation")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_price_compensation");

                    b.Property<decimal>("TotalPriceHouseSupportCompensation")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_price_house_support_compensation");

                    b.Property<decimal>("TotalPriceLandSupportCompensation")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_price_land_support_compensation");

                    b.Property<decimal>("TotalPriceOtherSupportCompensation")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_price_other_support_compensation");

                    b.Property<decimal>("TotalPricePlantSupportCompensation")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("total_price_plant_support_compensation");

                    b.HasKey("PlanId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Metadata.Core.Entities.PriceAppliedCode", b =>
                {
                    b.Property<string>("PriceAppliedCodeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("price_applied_code_id");

                    b.Property<DateTime>("ExpriredTime")
                        .HasColumnType("datetime")
                        .HasColumnName("exprired_time");

                    b.Property<string>("PriceContent")
                        .IsRequired()
                        .HasColumnType("ntext")
                        .HasColumnName("price_content");

                    b.Property<string>("UnitPriceCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("unit_price_code");

                    b.HasKey("PriceAppliedCodeId")
                        .HasName("PK_PriceAppliedCode");

                    b.ToTable("PriceAppliedCodes");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_id");

                    b.Property<string>("AssetCompensationBasis")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("asset_compensation_basis");

                    b.Property<string>("CheckCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("check_code");

                    b.Property<string>("District")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("district");

                    b.Property<int?>("ImplementationYear")
                        .HasColumnType("int")
                        .HasColumnName("implementation_year");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LandCompensationBasis")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("land_compensation_basis");

                    b.Property<string>("PriceAppliedCodeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("price_applied_code_id");

                    b.Property<string>("PriceBasis")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("price_basis");

                    b.Property<DateTime?>("ProjectApprovalDate")
                        .HasColumnType("date")
                        .HasColumnName("project_approval_date");

                    b.Property<int?>("ProjectBriefNumber")
                        .HasColumnType("int")
                        .HasColumnName("project_brief_number");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_code");

                    b.Property<string>("ProjectCreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("project_created_by");

                    b.Property<DateTime>("ProjectCreatedTime")
                        .HasColumnType("date")
                        .HasColumnName("project_created_time");

                    b.Property<decimal?>("ProjectExpense")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("project_expense");

                    b.Property<string>("ProjectLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("project_location");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_name");

                    b.Property<string>("ProjectNote")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_note");

                    b.Property<string>("ProjectStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("project_status");

                    b.Property<string>("Province")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("province");

                    b.Property<string>("RegulatedUnitPrice")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("regulated_unit_price");

                    b.Property<int?>("ReportNumber")
                        .HasColumnType("int")
                        .HasColumnName("report_number");

                    b.Property<string>("ReportSignal")
                        .HasColumnType("ntext")
                        .HasColumnName("report_signal");

                    b.Property<string>("SignerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("signer_id");

                    b.Property<string>("Ward")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ward");

                    b.HasKey("ProjectId")
                        .HasName("PK_Project");

                    b.HasIndex("PriceAppliedCodeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Metadata.Core.Entities.ProjectDocument", b =>
                {
                    b.Property<string>("ProjectDocumentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_document_id");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("document_id");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_id");

                    b.HasKey("ProjectDocumentId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDocuments");
                });

            modelBuilder.Entity("Metadata.Core.Entities.ResettlementDocument", b =>
                {
                    b.Property<string>("ProjectDocumentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_document_id");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("document_id");

                    b.Property<string>("ResettlementProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("resettlement_project_id");

                    b.HasKey("ProjectDocumentId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ResettlementProjectId");

                    b.ToTable("ResettlementDocuments");
                });

            modelBuilder.Entity("Metadata.Core.Entities.ResettlementProject", b =>
                {
                    b.Property<string>("ResettlementProjectId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("resettlement_project_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("document_id");

                    b.Property<string>("ImplementYear")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("implement_year");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<int>("LandNumber")
                        .HasColumnType("int")
                        .HasColumnName("land_number");

                    b.Property<decimal>("LandPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("land_price");

                    b.Property<DateTime?>("LastDateEdit")
                        .HasColumnType("datetime")
                        .HasColumnName("last_date_edit");

                    b.Property<string>("LastPersonEdit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_person_edit");

                    b.Property<int>("LimitToConsideration")
                        .HasColumnType("int")
                        .HasColumnName("limit_to_consideration");

                    b.Property<int>("LimitToResettlement")
                        .HasColumnType("int")
                        .HasColumnName("limit_to_resettlement");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("position");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_id");

                    b.HasKey("ResettlementProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ResettlementProjects");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Support", b =>
                {
                    b.Property<string>("SupportId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("support_id");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("owner_id");

                    b.Property<string>("SupportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("support_content");

                    b.Property<int>("SupportNumber")
                        .HasColumnType("int")
                        .HasColumnName("support_number");

                    b.Property<decimal>("SupportPrice")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("support_price");

                    b.Property<string>("SupportTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("support_type_id");

                    b.Property<string>("SupportUnit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("support_unit");

                    b.HasKey("SupportId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SupportTypeId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("Metadata.Core.Entities.SupportType", b =>
                {
                    b.Property<string>("SupportTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("support_type_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("SupportTypeId")
                        .HasName("PK_SupportType");

                    b.ToTable("SupportTypes");
                });

            modelBuilder.Entity("Metadata.Core.Entities.UnitPriceAsset", b =>
                {
                    b.Property<string>("UnitPriceAssetId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit_price_asset_id");

                    b.Property<string>("AssetGroupId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("asset_group_id");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("asset_name");

                    b.Property<decimal>("AssetPrice")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("asset_price");

                    b.Property<string>("AssetRegulation")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("asset_regulation");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("asset_type");

                    b.Property<string>("AssetUnitId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("asset_unit_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PriceAppliedCodeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("price_applied_code_id");

                    b.HasKey("UnitPriceAssetId");

                    b.HasIndex("AssetGroupId");

                    b.HasIndex("AssetUnitId");

                    b.HasIndex("PriceAppliedCodeId");

                    b.ToTable("UnitPriceAssets");
                });

            modelBuilder.Entity("Metadata.Core.Entities.UnitPriceLand", b =>
                {
                    b.Property<string>("UnitPriceLandId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit_price_land_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<decimal?>("LandPosition1")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("land_position_1");

                    b.Property<decimal?>("LandPosition2")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("land_position_2");

                    b.Property<decimal?>("LandPosition3")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("land_position_3");

                    b.Property<decimal?>("LandPosition4")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("land_position_4");

                    b.Property<decimal?>("LandPosition5")
                        .HasColumnType("decimal(10, 3)")
                        .HasColumnName("land_position_5");

                    b.Property<string>("LandTypeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("land_type_id");

                    b.Property<string>("LandUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("land_unit");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_id");

                    b.Property<string>("StreetAreaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("street_area_name");

                    b.HasKey("UnitPriceLandId");

                    b.HasIndex("LandTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UnitPriceLands");
                });

            modelBuilder.Entity("Metadata.Core.Entities.AssetCompensation", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Owner", "Owner")
                        .WithMany("AssetCompensations")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_AssetCompensations_Owners");

                    b.HasOne("Metadata.Core.Entities.UnitPriceAsset", "UnitPriceAsset")
                        .WithMany("AssetCompensations")
                        .HasForeignKey("UnitPriceAssetId")
                        .IsRequired()
                        .HasConstraintName("FK_AssetCompensations_UnitPriceAssets");

                    b.Navigation("Owner");

                    b.Navigation("UnitPriceAsset");
                });

            modelBuilder.Entity("Metadata.Core.Entities.AttachFile", b =>
                {
                    b.HasOne("Metadata.Core.Entities.AssetCompensation", "AssetCompensation")
                        .WithMany("AttachFiles")
                        .HasForeignKey("AssetCompensationId")
                        .HasConstraintName("FK_AttachFiles_AssetCompensations");

                    b.HasOne("Metadata.Core.Entities.GcnlandInfo", "GcnLandInfo")
                        .WithMany("AttachFiles")
                        .HasForeignKey("GcnLandInfoId")
                        .HasConstraintName("FK_AttachFiles_GCNLandInfos");

                    b.HasOne("Metadata.Core.Entities.MeasuredLandInfo", "MeasuredLandInfo")
                        .WithMany("AttachFiles")
                        .HasForeignKey("MeasuredLandInfoId")
                        .HasConstraintName("FK_AttachFiles_MeasuredLandInfo");

                    b.HasOne("Metadata.Core.Entities.Owner", "Owner")
                        .WithMany("AttachFiles")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_AttachFiles_Owners");

                    b.HasOne("Metadata.Core.Entities.Plan", "Plan")
                        .WithMany("AttachFiles")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_AttachFiles_Plans");

                    b.Navigation("AssetCompensation");

                    b.Navigation("GcnLandInfo");

                    b.Navigation("MeasuredLandInfo");

                    b.Navigation("Owner");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Deduction", b =>
                {
                    b.HasOne("Metadata.Core.Entities.DeductionType", "DeductionType")
                        .WithMany("Deductions")
                        .HasForeignKey("DeductionTypeId")
                        .HasConstraintName("FK_Deductions_DeductionTypes");

                    b.HasOne("Metadata.Core.Entities.Owner", "Owner")
                        .WithMany("Deductions")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Deductions_Owners");

                    b.Navigation("DeductionType");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Document", b =>
                {
                    b.HasOne("Metadata.Core.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_DocumentTypes");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Metadata.Core.Entities.GcnlandInfo", b =>
                {
                    b.HasOne("Metadata.Core.Entities.LandType", "LandType")
                        .WithMany("GcnlandInfos")
                        .HasForeignKey("LandTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_GCNLandInfos_LandTypes");

                    b.HasOne("Metadata.Core.Entities.Owner", "Owner")
                        .WithMany("GcnlandInfos")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_GCNLandInfos_Owners");

                    b.Navigation("LandType");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Metadata.Core.Entities.LandPositionInfo", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Project", "Project")
                        .WithMany("LandPositionInfos")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_LandPositionInfos_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Metadata.Core.Entities.LandResettlement", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Owner", "Owner")
                        .WithMany("LandResettlements")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_LandResettlements_Owners");

                    b.HasOne("Metadata.Core.Entities.ResettlementProject", "ResettlementProject")
                        .WithMany("LandResettlements")
                        .HasForeignKey("ResettlementProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_LandResettlements_ResettlementProjects");

                    b.Navigation("Owner");

                    b.Navigation("ResettlementProject");
                });

            modelBuilder.Entity("Metadata.Core.Entities.LandType", b =>
                {
                    b.HasOne("Metadata.Core.Entities.LandGroup", "LandGroup")
                        .WithMany("LandTypes")
                        .HasForeignKey("LandGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_LandTypes_LandGroups");

                    b.Navigation("LandGroup");
                });

            modelBuilder.Entity("Metadata.Core.Entities.MeasuredLandInfo", b =>
                {
                    b.HasOne("Metadata.Core.Entities.GcnlandInfo", "GcnLandInfo")
                        .WithMany("MeasuredLandInfos")
                        .HasForeignKey("GcnLandInfoId")
                        .IsRequired()
                        .HasConstraintName("FK_MeasuredLandInfo_GCNLandInfos");

                    b.HasOne("Metadata.Core.Entities.LandType", "LandType")
                        .WithMany("MeasuredLandInfos")
                        .HasForeignKey("LandTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_MeasuredLandInfo_LandTypes");

                    b.HasOne("Metadata.Core.Entities.UnitPriceLand", "UnitPriceLand")
                        .WithMany("MeasuredLandInfos")
                        .HasForeignKey("UnitPriceLandId")
                        .IsRequired()
                        .HasConstraintName("FK_MeasuredLandInfo_UnitPriceLands");

                    b.Navigation("GcnLandInfo");

                    b.Navigation("LandType");

                    b.Navigation("UnitPriceLand");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Owner", b =>
                {
                    b.HasOne("Metadata.Core.Entities.OrganizationType", "OrganizationType")
                        .WithMany("Owners")
                        .HasForeignKey("OrganizationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Owners_OrganizationTypes");

                    b.HasOne("Metadata.Core.Entities.Plan", "Plan")
                        .WithMany("Owners")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_Owners_Plans");

                    b.HasOne("Metadata.Core.Entities.Project", "Project")
                        .WithMany("Owners")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Owners_Projects");

                    b.Navigation("OrganizationType");

                    b.Navigation("Plan");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Plan", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Project", "Project")
                        .WithMany("Plans")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Plans_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Project", b =>
                {
                    b.HasOne("Metadata.Core.Entities.PriceAppliedCode", "PriceAppliedCode")
                        .WithMany("Projects")
                        .HasForeignKey("PriceAppliedCodeId")
                        .HasConstraintName("FK_Projects_PriceAppliedCodes");

                    b.Navigation("PriceAppliedCode");
                });

            modelBuilder.Entity("Metadata.Core.Entities.ProjectDocument", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Document", "Document")
                        .WithMany("ProjectDocuments")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_ProjectDocuments_Documents");

                    b.HasOne("Metadata.Core.Entities.Project", "Project")
                        .WithMany("ProjectDocuments")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ProjectDocuments_Projects");

                    b.Navigation("Document");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Metadata.Core.Entities.ResettlementDocument", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Document", "Document")
                        .WithMany("ResettlementDocuments")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_ResettlementDocuments_Documents");

                    b.HasOne("Metadata.Core.Entities.ResettlementProject", "ResettlementProject")
                        .WithMany("ResettlementDocuments")
                        .HasForeignKey("ResettlementProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ResettlementDocuments_ResettlementProjects");

                    b.Navigation("Document");

                    b.Navigation("ResettlementProject");
                });

            modelBuilder.Entity("Metadata.Core.Entities.ResettlementProject", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Project", "Project")
                        .WithMany("ResettlementProjects")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ResettlementProjects_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Support", b =>
                {
                    b.HasOne("Metadata.Core.Entities.Owner", "Owner")
                        .WithMany("Supports")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Supports_Owners");

                    b.HasOne("Metadata.Core.Entities.SupportType", "SupportType")
                        .WithMany("Supports")
                        .HasForeignKey("SupportTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Supports_SupportTypes");

                    b.Navigation("Owner");

                    b.Navigation("SupportType");
                });

            modelBuilder.Entity("Metadata.Core.Entities.UnitPriceAsset", b =>
                {
                    b.HasOne("Metadata.Core.Entities.AssetGroup", "AssetGroup")
                        .WithMany("UnitPriceAssets")
                        .HasForeignKey("AssetGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_UnitPriceAssets_AssetGroups");

                    b.HasOne("Metadata.Core.Entities.AssetUnit", "AssetUnit")
                        .WithMany("UnitPriceAssets")
                        .HasForeignKey("AssetUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_UnitPriceAssets_AssetUnits");

                    b.HasOne("Metadata.Core.Entities.PriceAppliedCode", "PriceAppliedCode")
                        .WithMany("UnitPriceAssets")
                        .HasForeignKey("PriceAppliedCodeId")
                        .IsRequired()
                        .HasConstraintName("FK_UnitPriceAssets_PriceAppliedCodes");

                    b.Navigation("AssetGroup");

                    b.Navigation("AssetUnit");

                    b.Navigation("PriceAppliedCode");
                });

            modelBuilder.Entity("Metadata.Core.Entities.UnitPriceLand", b =>
                {
                    b.HasOne("Metadata.Core.Entities.LandType", "LandType")
                        .WithMany("UnitPriceLands")
                        .HasForeignKey("LandTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_UnitPriceLands_LandTypes");

                    b.HasOne("Metadata.Core.Entities.Project", "Project")
                        .WithMany("UnitPriceLands")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_UnitPriceLands_Projects");

                    b.Navigation("LandType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Metadata.Core.Entities.AssetCompensation", b =>
                {
                    b.Navigation("AttachFiles");
                });

            modelBuilder.Entity("Metadata.Core.Entities.AssetGroup", b =>
                {
                    b.Navigation("UnitPriceAssets");
                });

            modelBuilder.Entity("Metadata.Core.Entities.AssetUnit", b =>
                {
                    b.Navigation("UnitPriceAssets");
                });

            modelBuilder.Entity("Metadata.Core.Entities.DeductionType", b =>
                {
                    b.Navigation("Deductions");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Document", b =>
                {
                    b.Navigation("ProjectDocuments");

                    b.Navigation("ResettlementDocuments");
                });

            modelBuilder.Entity("Metadata.Core.Entities.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Metadata.Core.Entities.GcnlandInfo", b =>
                {
                    b.Navigation("AttachFiles");

                    b.Navigation("MeasuredLandInfos");
                });

            modelBuilder.Entity("Metadata.Core.Entities.LandGroup", b =>
                {
                    b.Navigation("LandTypes");
                });

            modelBuilder.Entity("Metadata.Core.Entities.LandType", b =>
                {
                    b.Navigation("GcnlandInfos");

                    b.Navigation("MeasuredLandInfos");

                    b.Navigation("UnitPriceLands");
                });

            modelBuilder.Entity("Metadata.Core.Entities.MeasuredLandInfo", b =>
                {
                    b.Navigation("AttachFiles");
                });

            modelBuilder.Entity("Metadata.Core.Entities.OrganizationType", b =>
                {
                    b.Navigation("Owners");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Owner", b =>
                {
                    b.Navigation("AssetCompensations");

                    b.Navigation("AttachFiles");

                    b.Navigation("Deductions");

                    b.Navigation("GcnlandInfos");

                    b.Navigation("LandResettlements");

                    b.Navigation("Supports");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Plan", b =>
                {
                    b.Navigation("AttachFiles");

                    b.Navigation("Owners");
                });

            modelBuilder.Entity("Metadata.Core.Entities.PriceAppliedCode", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("UnitPriceAssets");
                });

            modelBuilder.Entity("Metadata.Core.Entities.Project", b =>
                {
                    b.Navigation("LandPositionInfos");

                    b.Navigation("Owners");

                    b.Navigation("Plans");

                    b.Navigation("ProjectDocuments");

                    b.Navigation("ResettlementProjects");

                    b.Navigation("UnitPriceLands");
                });

            modelBuilder.Entity("Metadata.Core.Entities.ResettlementProject", b =>
                {
                    b.Navigation("LandResettlements");

                    b.Navigation("ResettlementDocuments");
                });

            modelBuilder.Entity("Metadata.Core.Entities.SupportType", b =>
                {
                    b.Navigation("Supports");
                });

            modelBuilder.Entity("Metadata.Core.Entities.UnitPriceAsset", b =>
                {
                    b.Navigation("AssetCompensations");
                });

            modelBuilder.Entity("Metadata.Core.Entities.UnitPriceLand", b =>
                {
                    b.Navigation("MeasuredLandInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
